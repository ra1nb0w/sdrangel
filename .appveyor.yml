---
version: "{build}-{branch}"
clone_depth: 5

# maybe we can add arm
#platform:
#  - x64

matrix:
  fast_finish: false

environment:
  matrix:
    - TARGET: vs2017gui
      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'
      CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
      CMAKE_CUSTOM_OPTIONS: "-DFORCE_SSE41=ON"
      # RelWithDebInfo
      configuration: Release
      platform: x64
    #- TARGET: vs2017gui32bit
    #  APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'
    #  CMAKE_GENERATOR: "Visual Studio 15 2017 Win32"
    #  # RelWithDebInfo
    #  configuration: Release
    #  platform: x86
    - TARGET: vs2015gui
      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'
      CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
      #CMAKE_CUSTOM_OPTIONS: '-DQT_PATH=C:\Qt\5.12.2\msvc2017_64'
      # RelWithDebInfo
      configuration: Release
      platform: x64
    - TARGET: ubuntu1804sse41
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
      DEBUILD: 1
      CMAKE_CUSTOM_OPTIONS: "-DFORCE_SSE41=ON"
      platform: x64
    - TARGET: ubuntu1804server
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
      DEBUILD: 0
      CMAKE_CUSTOM_OPTIONS: "-DBUILD_GUI=OFF"
      platform: x64
    - TARGET: ubuntu1804external
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
      DEBUILD: 1
      CMAKE_CUSTOM_OPTIONS: "-DENABLE_EXTERNAL_LIBRARIES=ON"
      platform: x64

# image:
#  - &linux   Ubuntu1804
#  - matrix: { only: [ image: *linux ] }
for:
  - matrix:
      only:
        - APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'
        - APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'
    cache:
      - C:\ProgramData\chocolatey\bin
      - C:\ProgramData\chocolatey\lib
      #- C:\Tools\vcpkg\installed
    install:
      # the clone doesn't get submodules
      - git submodule update --init --recursive
    build_script:
      - cmake\ci\build_sdrangel.bat
    #before_build:
    #  - cmake . -G "%CMAKE_GENERATOR%" %CMAKE_CUSTOM_OPTIONS%
    #  The remote server returned an error: (500) Internal Server Error
    #build:
    #  parallel: true
    #  project: $(APPVEYOR_BUILD_FOLDER)\$(APPVEYOR_PROJECT_NAME).sln
    #test_script:
      #- ps: '%APPVEYOR_BUILD_FOLDER%\%CONFIGURATION%\tests.exe'
    # enable temporary RDP
    # see https://www.appveyor.com/docs/how-to/rdp-to-build-worker/
    #init:
    #   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    #on_finish:
    #   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - matrix:
      only:
        - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1804
    cache:
      - $HOME/external/
    install:
      - sh: sudo apt-get update
      # not sdrplay with soapysdr; libairspyhf-dev is too old (no lna)
      - sh: |
          sudo apt-get -y install build-essential cmake git \
            devscripts fakeroot debhelper libfftw3-dev qtbase5-dev libqt5opengl5-dev \
            qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5multimedia5-plugins \
            libusb-1.0-0-dev libboost-all-dev libasound2-dev libopencv-dev \
            libxml2-dev bison flex ffmpeg  libpostproc-dev libavcodec-dev libavformat-dev \
            libopus-dev autoconf automake libtool
      - sh: |
            if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then
              sudo apt-get -y install libcodec2-dev libairspy-dev libhackrf-dev librtlsdr-dev \
                liblimesuite-dev libbladerf-dev libsoapysdr-dev libiio-dev
            fi
      - sh: if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then bash cmake/ci/build_cm256cc.sh; fi
      - sh: if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then bash cmake/ci/build_mbelib.sh; fi
      - sh: if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then bash cmake/ci/build_serialdv.sh; fi
      - sh: if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then bash cmake/ci/build_dsdcc.sh; fi
      - sh: if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then bash cmake/ci/build_perseus-sdr.sh; fi
      - sh: if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then bash cmake/ci/build_xtrx-sdr.sh; fi
      - sh: if [[ ! "${CMAKE_CUSTOM_OPTIONS}" =~ "ENABLE_EXTERNAL_LIBRARIES=ON" ]]; then bash cmake/ci/build_airspyhf.sh; fi
    before_build:
      - sh: bash -c export
      - sh: bash -c pwd
    build_script:
      - sh: bash cmake/ci/build_sdrangel.sh
    test_script:
      # debian build path
      - sh: if [[ "x${DEBUILD}" = "x1" ]]; then ./obj-x86_64-linux-gnu/sdrangelbench; else ./build/sdrangelbench; fi

deploy: off
